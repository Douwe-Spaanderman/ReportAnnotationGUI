name: Build ReportAnnotationGUI App

on:
  push:
    branches: [main]
  pull_request:
    types: [closed]
    branches: [main]

jobs:
  build-windows:
    runs-on: windows-latest
    outputs:
      artifact-name: Windows-build
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.8.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade setuptools==44.0.0, pip==25.0.1, wheel==0.45.1
          pip install -r requirements.txt
          pip install --no-binary :all: nmslib==2.1.1

      - name: Build with PyInstaller
        run: |
          pyinstaller app.spec

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: Windows-build
          path: dist/ReportAnnotationGUI.exe

  build-macos-intel:
    runs-on: macos-latest
    name: Build macOS (Intel)
    outputs:
      artifact-name: macOS-intel-build
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.8.10'

      - name: Force Intel architecture
        run: |
          echo "Using Intel architecture"
          export ARCHFLAGS="-arch x86_64"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade setuptools==44.0.0 pip==25.0.1 wheel==0.45.1
          pip install -r requirements.txt
          pip install --no-binary :all: nmslib==2.1.1

      - name: Build with PyInstaller
        run: |
          pyinstaller app.spec

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: macOS-intel-build
          path: dist/ReportAnnotationGUI

  build-macos-arm:
    runs-on: macos-latest
    name: Build macOS (ARM)
    outputs:
      artifact-name: macOS-arm-build
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.8.10'

      - name: Force ARM architecture
        run: |
          echo "Using ARM64 architecture"
          export ARCHFLAGS="-arch arm64"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade setuptools==44.0.0 pip==25.0.1 wheel==0.45.1
          pip install -r requirements.txt
          pip install --no-binary :all: nmslib==2.1.1

      - name: Build with PyInstaller
        run: |
          pyinstaller app.spec

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: macOS-arm-build
          path: dist/ReportAnnotationGUI

  create-release:
    needs: [build-windows, build-macos-intel, build-macos-arm]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Git
        run: git fetch --tags

      - name: Get latest tag
        id: get_tag
        run: |
          latest=$(git tag --sort=-v:refname | grep '^v[0-9]\+\.[0-9]\+\.[0-9]\+$' | head -n 1)
          echo "Latest tag: $latest"
          if [ -z "$latest" ]; then
            new_tag="v1.0.0"
          else
            major=$(echo $latest | cut -d. -f1 | tr -d 'v')
            minor=$(echo $latest | cut -d. -f2)
            patch=$(echo $latest | cut -d. -f3)
            patch=$((patch + 1))
            new_tag="v$major.$minor.$patch"
          fi
          echo "tag_name=$new_tag" >> $GITHUB_OUTPUT

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./release-assets/

      - name: Create GitHub Release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ steps.get_tag.outputs.tag_name }}
          release_name: Release ${{ steps.get_tag.outputs.tag_name }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Windows binary
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create-release.outputs.upload_url }}
          asset_path: ./release-assets/Windows-build/ReportAnnotationGUI.exe
          asset_name: ReportAnnotationGUI_windows.exe
          asset_content_type: application/octet-stream

      - name: Upload macOS Intel binary
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create-release.outputs.upload_url }}
          asset_path: ./release-assets/macOS-intel-build/ReportAnnotationGUI
          asset_name: ReportAnnotationGUI_macos_intel
          asset_content_type: application/octet-stream

      - name: Upload macOS ARM binary
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create-release.outputs.upload_url }}
          asset_path: ./release-assets/macOS-arm-build/ReportAnnotationGUI
          asset_name: ReportAnnotationGUI_macos_arm
          asset_content_type: application/octet-stream